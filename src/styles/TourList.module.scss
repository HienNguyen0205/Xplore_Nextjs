.button {
    border-radius: 0.8rem;
    padding: 6px 16px;
    color: orange;
    box-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);
    --tw-ring-color: orange;
    &:hover{
        background-color: orange;
        color: white;
    }
}

.tour_item{
    width: 100%;
	cursor: pointer;
    display: flex;
    flex-direction: column;
    border-radius: 0.75rem;
    --tw-bg-opacity: 1;
    background-color: rgb(255 255 255 / var(--tw-bg-opacity));
    --tw-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
    --tw-shadow-colored: 0 10px 15px -3px var(--tw-shadow-color), 0 4px 6px -4px var(--tw-shadow-color);
    box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
    transition: 0.3s;
    &:hover{
		--tw-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);
		--tw-shadow-colored: 0 20px 25px -5px var(--tw-shadow-color), 0 8px 10px -6px var(--tw-shadow-color);
		box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
        transform: translateY(-0.5rem);
    }
}

$charCount: 0; $durTotal: 0;

$durCharFwd: 0.10; // character typed
$durFullGap: 2.00; // time between typed/delete
$durCharBwd: 0.08; // character deleted
$durDoneGap: 1.00; // time between strings

$strings: (
	"Attractive"
    "Popular"
);

@each $string in $strings {
	$charCount: $charCount + str-length($string);
	$durTotal: $durTotal
		+ (str-length($string) * ($durCharFwd + $durCharBwd))
		+ $durFullGap + $durDoneGap;
}

.type_text {
    font-size: 3rem;
    line-height: 1;
    font-weight: 700;
    color: #ff2aef;
    &::before{
        content: "";
		display: inline-block;
		padding-right: 3px;
		border-right: 2px solid #49c5f6;
		text-shadow: 0 0 5px rgba(255, 42, 239, .75);
		white-space: nowrap;
		animation: typed #{$durTotal + "s"} linear 1s infinite, beam-blink 1s infinite;
    }
}

@function percent($string, $letter, $modifier) {
	$stringsPast: $string - 1; $time: 0;
	@while $stringsPast > 0 {
		$time: $time
			+ (($durCharFwd + $durCharBwd) * (str-length(nth($strings, $stringsPast))))
			+ $durFullGap + $durDoneGap;
		$stringsPast: $stringsPast - 1;
	}
	@if $letter <= str-length(nth($strings, $string)) {
		$time: $time
			+ ($durCharFwd * ($letter - 1));
	} @else {
		$time: $time
			+ ($durCharFwd * str-length(nth($strings, $string)))
			+ $durFullGap
			+ ($durCharBwd * ($letter - str-length(nth($strings, $string))));
	}
	@return ($time / $durTotal * 100 + $modifier) + "%";
}

$currentPercentage: 0;

@keyframes typed {
	@for $i from 1 through length($strings) {
		@for $j from 1 through (str-length(nth($strings, $i)) * 2) {
			@if $j < str-length(nth($strings, $i)) * 2 {
				#{percent($i, $j, 0)}, #{percent($i, $j+1, -0.001)} {
					@if $j <= str-length(nth($strings, $i)) {
						content: quote(#{str_slice(nth($strings, $i), 1, $j)});
					} @else {
						content: quote(#{str_slice(nth($strings, $i), 1, str-length(nth($strings, $i)) - ($j - str-length(nth($strings, $i))))});
					}
				}
			} @else {
				@if $i < length($strings) {
					#{percent($i, $j, 0)}, #{percent($i+1, 1, -0.001)} {
						content: ""; 
					}
				} @else { // last string
					#{percent($i, $j, 0)}, 100% {
						content: "";
					}
				}
			}
		}
	}
}

@keyframes beam-blink {
	75% { border-color: transparent; }
}